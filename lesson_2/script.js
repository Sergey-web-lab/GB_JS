/* 1. Почему код дает именно такие результаты?
var a = 1, b = 1, c, d;
c = ++a; alert(c); // 2
d = b++; alert(d); // 1
c = (2+ ++a); alert(c); // 5
d = (2+ b++); alert(d); // 4
alert(a); // 3
alert(b); // 3

2. Чему будет равен x?
var a = 2;
var x = 1 + (a *= 2);

3. Объявить две целочисленные переменные — a и b и задать им произвольные начальные
значения. Затем написать скрипт, который работает по следующему принципу:
o если a и b положительные, вывести их разность;
o если а и b отрицательные, вывести их произведение;
o если а и b разных знаков, вывести их сумму;
Ноль можно считать положительным числом.

4. Присвоить переменной а значение в промежутке [0..15]. С помощью оператора switch
организовать вывод чисел от a до 15.

5. Реализовать четыре основные арифметические операции в виде функций с двумя
параметрами. Обязательно использовать оператор return.

6. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation),
где arg1, arg2 — значения аргументов, operation — строка с названием операции. В
зависимости от переданного значения выполнить одну из арифметических операций
(использовать функции из пункта 5) и вернуть полученное значение (применить switch).

7. * Сравнить null и 0. Объяснить результат.

8. * С помощью рекурсии организовать функцию возведения числа в степень. Формат: function
power(val, pow), где val — заданное число, pow –— степень. */



// 1)

// Решение:

// var a = 1, b = 1, c, d;

// c = ++a; alert(c); // 2 т.к. ++a увелицивает и возвращает значение переменной "a" сразу на одну единицу за каждую итерацию,
// а тут у нас одна итерация и при этом первоначально переменная "a" была равна 1, т.е. "a" становится равна 2, далее "c" присваивается значение
// "a", т.е. с = 2.

// d = b++; alert(d); // 1 т.к. b++ сразу возвращает значение переменной "b" и только после увеличивает значение переменной, т.к. "b" = 1,
// то и вернётся 1, а после произойдёт присвоение значения "b" переменной "d". d = 1.

// c = (2+ ++a); alert(c); // 5 т.к. до этого мы использовали префиксный инкремент ++a и значение у переменной "a" стало равно 2, то сейчас
// при повторном использовании ++a "a" будет равна 3, далее 2 + 3 = 5. Это значение и возвращается как значение переменной "c".

// d = (2+ b++); alert(d); // 4 т.к. постфиксный инкремент при использовании сразу возвратил и псле увеличил значение "b", то b стало = 2,
// далее опять при его использовании b++ выводит значение, далее происходит операция сложения и присвоения переменной "d", а уже толкьо
// после увеличивает значение b, т.е. d = 2 + 2. d = 4.

// alert(a); // 3 т.к. происходило по сути 2 итерации начиная с 1.

// alert(b); // 3 т.к. происходило по сути 2 итерации начиная с 1.



// 2)

// Чему будет равен x?
// var a = 2;
// var x = 1 + (a *= 2);

// Ответ:

// var x будет = 5. Выполним проверку:

'use strict';

var a = 2;
var x = 1 + (a *= 2);
console.log(x);

// Ответ верынй. В консоль вернёт х = 5.



// 3)
// Объявить две целочисленные переменные — a и b и задать им произвольные начальные
// значения. Затем написать скрипт, который работает по следующему принципу:
// o если a и b положительные, вывести их разность;
// o если а и b отрицательные, вывести их произведение;
// o если а и b разных знаков, вывести их сумму;
// Ноль можно считать положительным числом.

// Решение:

{
    let a = -1;
    let b = 0;

    if (a >= 0 && b >= 0) {
        console.log(a - b);
    } else if (a < 0 && b < 0) {
        console.log(a * b);
    } else {
        console.log(a + b);
    }
}



// 4) Присвоить переменной а значение в промежутке [0..15]. С помощью оператора switch
// организовать вывод чисел от a до 15.

// Решение:

{
    let a = +prompt('Введите числа от 1 до 15');

    switch (a) {
        case 1:
            console.log(a++);
        case 2:
            console.log(a++);
        case 3:
            console.log(a++);
        case 4:
            console.log(a++);
        case 5:
            console.log(a++);
        case 6:
            console.log(a++);
        case 7:
            console.log(a++);
        case 8:
            console.log(a++);
        case 9:
            console.log(a++);
        case 10:
            console.log(a++);
        case 11:
            console.log(a++);
        case 12:
            console.log(a++);
        case 13:
            console.log(a++);
        case 14:
            console.log(a++);
        case 15:
            console.log(a);
    }
}



// 5) Реализовать четыре основные арифметические операции в виде функций с двумя
// параметрами. Обязательно использовать оператор return.

// Решение:

function addition(a, b) {
    return a + b;
}

function subtraction(a, b) {
    return a - b;
}

function multiplication(a, b) {
    return a * b;
}

function division(a, b) {
    return a / b;
}



// 6) Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation),
// где arg1, arg2 — значения аргументов, operation — строка с названием операции. В
// зависимости от переданного значения выполнить одну из арифметических операций
// (использовать функции из пункта 5) и вернуть полученное значение (применить switch).

// Решение:

function mathOperation(arg1, arg2, operation) {
    switch (operation) {
        case 'сложение':
            return addition(arg1, arg2);
        case 'вычитание':
            return subtraction(arg1, arg2);
        case 'умножение':
            return multiplication(arg1, arg2);
        case 'деление':
            return division(arg1, arg2);
    }
}

// Выполним проверку на работоспособность кода:

console.log(mathOperation(2, 3, 'умножение'));

// В консоль возвращается 6. Всё работает.


