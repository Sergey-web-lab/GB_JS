/* 1. Продумать, где можно применить замыкания для практикума из седьмого урока.

2. Не выполняя код, ответить, что выведет браузер и почему.


Решение:

2)

a.
if (!("a" in window)) {
var a = 1;
}
alert(a);
// браузер выведет undefined т.к. 'а' имеет глобальную область видимости из-за того, что объявлена не в теле функции. Не смотря на то,
что она есть, значение ей не присвоено, поэтому такой результат.

b.
var b = function a(x) {
x && a(--x);
};
alert(a);
// браузер выведет, что функция 'a' не определена, т.к. до этого мы присвоили функцию переменной 'b'.

c.
function a(x) {
return x * 2;
}
var a;
alert(a);
// браузер выведет всплывающее окно с телом функции, т.к. функции всплывают выше и выполняются раньше переменных var, 
// созданных в одной области видимости с функциями.

d.
function b(x, y, a) {
arguments[2] = 10;
alert(a);
}
b(1, 2, 3);
// браузер выведет в строгом режиме 3, без него 10, т.к. в строгом режиме не будет произведено присвоение значения аргументу 'а', т.к.
// в строгом режиме нельзя выполнять операции присваивания значений таким сущностям, предназначенным только для чтения,
// как arguments, NaN или eval. У нас какраз arguments.

e. *
function a() {
alert(this);
}
a.call(null);
// браузер выведет в строгом режиме null, без него объект Window. В обычном режиме если контекст this меняется на что-то, не являющееся 
// объектом (в данном случае на null), его место занимает глобальный объект (в данном случае Window).
 */

